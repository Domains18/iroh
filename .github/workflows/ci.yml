name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
    
    - name: Create test environment file
      run: |
        cp .env.example .env.test
        echo "HEIMDALL_DB_HOST=localhost" >> .env.test
        echo "HEIMDALL_DB_PORT=5432" >> .env.test
        echo "HEIMDALL_DB_NAME=test_db" >> .env.test
        echo "HEIMDALL_DB_USER=test_user" >> .env.test
        echo "HEIMDALL_DB_PASSWORD=test_password" >> .env.test
        echo "ODIN_DB_HOST=localhost" >> .env.test
        echo "ODIN_DB_PORT=5432" >> .env.test
        echo "ODIN_DB_NAME=test_db" >> .env.test
        echo "ODIN_DB_USER=test_user" >> .env.test
        echo "ODIN_DB_PASSWORD=test_password" >> .env.test
        echo "DRY_RUN=True" >> .env.test
    
    - name: Run linting with flake8
      run: |
        flake8 migrator/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 migrator/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run formatting check with black
      run: |
        black --check --diff migrator/
    
    - name: Run import sorting check with isort
      run: |
        isort --check-only --diff migrator/
    
    - name: Run type checking with mypy
      run: |
        mypy migrator/ || true  # Allow mypy to fail for now
    
    - name: Run security check with bandit
      run: |
        bandit -r migrator/ -f json -o bandit-report.json || true
        bandit -r migrator/
    
    - name: Run tests with pytest
      env:
        PYTHONPATH: .
        ENV_FILE: .env.test
      run: |
        pytest tests/ -v --cov=migrator --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
    
    - name: Build documentation
      run: |
        cd docs && make html || echo "Docs build failed - create docs/ directory if needed"

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
